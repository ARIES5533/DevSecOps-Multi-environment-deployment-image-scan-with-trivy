on:
  push:
    branches:
      - main

jobs: 
  unit_testing:
    name: Test the code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

  docker_build:
    name: Build, Test & Push to DockerHub
    needs: [unit_testing]
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker build for testing
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:latest ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:${{ github.run_number }}

      - name: docker build testing
        run: | 
          docker images
           docker run --name my-node-app -d \
            -p 3000:3000 \
            ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:latest

      - name: Wait for container to start
        run: sleep 10  # Adjust this wait time based on your container startup time
      
      - name: Run curl command
        run: curl -v http://127.0.0.1:3000
      
      - name: Stop Docker container
        run: docker stop my-node-app

      - name: Push images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:${{ github.run_number }}

  trivy_scan:
    name: Scan Docker Image for Vulnerabilities
    needs: [docker_build]
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.43.0/trivy_0.43.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.43.0_Linux-64bit.deb
          trivy --version  # Verify Trivy installation

      - name: Scan Docker image with Trivy
        run: |
          echo "Scanning Docker image for vulnerabilities..."
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:latest
          trivy image --severity HIGH,CRITICAL --format table ${{ secrets.DOCKERHUB_USERNAME }}/olumoko_image:${{ github.run_number }}

  eks_dev_deploy:
    name: Deploy to Dev environment
    needs: [trivy_scan]
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: install kubectl CLI
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Fetch eks cluster details
        run: |
          kubectl version
          echo Aries_is_live.......................
          kubectl get pods -A

      - name: Deploy to EKS
        run: |
          # Use envsubst to replace placeholders in the manifest
          envsubst < kubernetes/development/deployment.yaml | kubectl apply -f -
        env:
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          REPLICAS: ${{ secrets.KUBE_REPLICAS }}


  eks_prod_deploy:
    name: Deploy to Prod environment
    needs: [eks_dev_deploy]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: install kubectl CLI
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Fetch eks cluster details
        run: |
          kubectl version
          echo Aries_is_live.......................
          kubectl get pods -A

      - name: Deploy to EKS
        run: |
          # Use envsubst to replace placeholders in the manifest
          envsubst < kubernetes/production/deployment.yaml | kubectl apply -f -
        env:
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          REPLICAS: ${{ secrets.KUBE_REPLICAS }}
          
